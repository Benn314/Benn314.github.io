<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>重拾 C++</title>
    <url>/2022/12/13/%E9%87%8D%E6%8B%BEC++/</url>
    <content><![CDATA[<hr>
<p>参加蓝桥杯和天梯杯比赛时，使用 C++ 刷题的一些随笔</p>
<span id="more"></span>

<p><a href="https://www.liuchuo.net/archives/6565">如何在Dev-Cpp中使用C++11中的函数：stoi、to_string、unordered_map、unordered_set、auto</a></p>
<h2 id="算法常用API："><a href="#算法常用API：" class="headerlink" title="算法常用API："></a>算法常用API：</h2><p>stoi</p>
<p>to_string <em>用于 int to string</em></p>
<p>unordered_map</p>
<p>unordered_set</p>
<p>auto</p>
<blockquote>
<p>vector打印的字符会变成ASCII值</p>
</blockquote>
<h2 id="VS-2022-快捷键"><a href="#VS-2022-快捷键" class="headerlink" title="VS 2022 快捷键"></a>VS 2022 快捷键</h2><ul>
<li><strong>Ctrl+D</strong>：快速复制当前行到下一行</li>
<li><strong>Alt + ↑/↓</strong>：移动当前行</li>
<li><strong>Ctrl+K+C</strong>：注释</li>
<li><strong>Ctrl+K+U</strong>：取消注释</li>
</ul>
<h2 id="printVector"><a href="#printVector" class="headerlink" title="printVector"></a>printVector</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	<span class="comment">//尾插</span></span><br><span class="line">	v1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	v1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	v1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">	v1.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">	v1.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">	v1.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">	v1.<span class="built_in">push_back</span>(<span class="string">&#x27;I&#x27;</span>);</span><br><span class="line">	v1.<span class="built_in">push_back</span>(<span class="string">&#x27;II&#x27;</span>);</span><br><span class="line">	<span class="built_in">printVector</span>(v1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>(); <span class="comment">// 10 20 30 40 50 97 73 18761</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="getline-cin-str"><a href="#getline-cin-str" class="headerlink" title="getline(cin,str)"></a>getline(cin,str)</h2><p>使用getline(cin,str) 获取单变量的输入字符，范围是一行（即忽视空格），该函数需要引入头文件#include <code>&lt;string&gt;</code></p>
<p>‘\0’ 在c++中也是NULL的意思，即回车后，获取的字符就是‘\0’ ,也就是‘NULL’ 常用于条件判断</p>
<p>天梯比赛中：一次输入便一次输出是可以的，不是说要等到全部输入完成才进行输出</p>
<p>很巧妙的一个比赛技巧</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; c; i++) &#123;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">find</span>(str) == s.<span class="built_in">end</span>() &amp;&amp; ans.<span class="built_in">find</span>(str) == ans.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        ans.<span class="built_in">insert</span>(str);</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; str;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置flag来控制 “ “ 达到末尾没有空格的目的</p>
<p>set<strong>不允许</strong>容器中有<strong>重复</strong>的元素</p>
<h2 id="存放元素"><a href="#存放元素" class="headerlink" title="存放元素"></a>存放元素</h2><p>set主用 <code>insert()</code>，vector主用 <code>push_back()</code></p>
<h2 id="set-find"><a href="#set-find" class="headerlink" title="set-find()"></a>set-find()</h2><p><code>find(key);</code>  // 查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</p>
<blockquote>
<p>查找   —  find    （返回的是迭代器）</p>
</blockquote>
<h2 id="字符串大小写转换-cpp"><a href="#字符串大小写转换-cpp" class="headerlink" title="字符串大小写转换.cpp"></a>字符串大小写转换.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化方法2：利用 toupper() 和 tolower() 函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ConversionofLetterTwo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	cin &gt;&gt; ch;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">		ch = <span class="built_in">toupper</span>(ch);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">		ch = <span class="built_in">tolower</span>(ch);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Invaild Word\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">ConversionofLetterTwo</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h2><p>使用 <code>algorithm</code> 中的 <code>reverse</code> 函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    string s = <span class="string">&quot;hello&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());  </span><br><span class="line">  </span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>vector容器也适用，也是写成 <code>reverse(s.begin(),s.end()); </code></p>
<p><strong>不定长数组用 vector</strong></p>
<h2 id="vector是不定长数组，能用-访问元素"><a href="#vector是不定长数组，能用-访问元素" class="headerlink" title="vector是不定长数组，能用[]访问元素"></a>vector是不定长数组，能用[]访问元素</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测vector能否用[]访问元素</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1; <span class="comment">//无参构造</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; v1[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v1[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v1[<span class="number">9</span>];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：可以，插入进去就是数组，而且是不定长数组，可以通过[]访问数组元素</p>
</blockquote>
<p>长度：数组用length()，容器用size()</p>
<p>用临时数组来进行条件判断很好用 不要总想着在目的数组上进行数组改动 可以通过临时数组的改动 最后赋值给目的数组</p>
<p>string库函数，<code>append()</code> 用于在字符串后面进行追加字符串操作</p>
<h2 id="字符串的替换replace"><a href="#字符串的替换replace" class="headerlink" title="字符串的替换replace()"></a>字符串的替换replace()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串替换</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//替换</span></span><br><span class="line">	string str1 = <span class="string">&quot;abcdefgde&quot;</span>;</span><br><span class="line">	str1.<span class="built_in">replace</span>(<span class="number">4</span>, <span class="number">3</span>, <span class="string">&quot;1111&quot;</span>);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="【问题】cin-getline-混合使用时不能输入-直接执行下一行"><a href="#【问题】cin-getline-混合使用时不能输入-直接执行下一行" class="headerlink" title="【问题】cin getline 混合使用时不能输入 直接执行下一行"></a>【问题】cin getline 混合使用时不能输入 直接执行下一行</h2><p>经常会遇到一个问题，就是需要混合使用cin&gt;&gt;, cin.getline(), getline()时，有时会碰到不等你输入，就直接运行下一行的情况</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	string c;</span><br><span class="line">	cin &gt;&gt; N;</span><br><span class="line">	cin &gt;&gt; c;</span><br><span class="line"></span><br><span class="line">	string s;</span><br><span class="line">	<span class="built_in">getline</span>(cin, s);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果是因为缓冲区还剩一个回车符 直接赋给了getline() 然后就输入执行结束 实际上getline的字符你还没有输入 所以看到这种情况懵了</p>
<blockquote>
<p>先cin&gt;&gt;，再getline()的情况，是因为cin&gt;&gt;会在缓冲区中多出一个回车符，即你输入完之后，敲完回车符之后，cin&gt;&gt;会在缓冲区中再多保留一个回车符，这个多出来的回车符就导致下面getline()执行时，自动读取缓冲区内的回车符，于是这句getline()就相当于你什么都没有敲就执行完了，自然就会去执行下面的语句了。</p>
<p>这种情况的解决方法很简单，在cin&gt;&gt;后面加一句cin.get()就行了，这个cin.get()就会将缓冲区内多出来的回车符消耗掉，于是后面的输入就正常了</p>
</blockquote>
<p>修改过后的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	string c;</span><br><span class="line">	cin &gt;&gt; N;</span><br><span class="line">	cin &gt;&gt; c;</span><br><span class="line">	cin.<span class="built_in">get</span>(); <span class="comment">// 用 getchar();也行</span></span><br><span class="line">	<span class="comment">//getchar(); //如果是char c的话</span></span><br><span class="line">	string s;</span><br><span class="line">	<span class="built_in">getline</span>(cin, s);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="sort-Algorithm"><a href="#sort-Algorithm" class="headerlink" title="sort() - Algorithm"></a>sort() - Algorithm</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一：定义比较函数（最常用）</span></span><br><span class="line"><span class="comment">//情况一：数组排列</span></span><br><span class="line"><span class="type">int</span> A[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span><span class="comment">//int为数组数据类型</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;<span class="comment">//降序排列</span></span><br><span class="line"><span class="comment">//return a&lt;b;//默认的升序排列</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(A,A+<span class="number">100</span>,cmp1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参考文章：https://www.cnblogs.com/stones-dream/p/10183210.html</span></span><br></pre></td></tr></table></figure>

<h2 id="常犯的一个错误：段错误"><a href="#常犯的一个错误：段错误" class="headerlink" title="常犯的一个错误：段错误"></a>常犯的一个错误：段错误</h2><p>经常原因：for循环从最大长度到0 经常只改了第一条件，第三条件 i++ 总是忘记改成 i–</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 客制化及 Bug 解决</title>
    <url>/2023/12/13/Hexo%E5%AE%A2%E5%88%B6%E5%8C%96%E5%8F%8ABug%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>最开始新建该文章只是为了记录如何解决<u> Hexo 线上环境图片不显示的问题</u> ，但随着补充内容逐渐增加，后续关于 Hexo 的一些小需求调整 or 遇到 XxxBug or 定制符合自己需求的样式，都会汇总到该文章中。</p>
</blockquote>
<span id="more"></span>

<h2 id="hexo-asset-image-插件失效原因分析"><a href="#hexo-asset-image-插件失效原因分析" class="headerlink" title="hexo-asset-image 插件失效原因分析"></a>hexo-asset-image 插件失效原因分析</h2><p>一年前搭建了此博客，由于本地仓库图片相对路径与线上环境图片引用地址不符导致线上图片无法正常显示，同时写博客文章需要耗费较多时间来进行内容验证和排版，故而废弃了博客，今天重新给它捡回来。</p>
<p>Hexo发布的文章被存放正在 <code>/source/_post</code> 中，这里我们以文章 <code>aaa</code> 为例，对应到线上环境的 url 地址变成了  <code>https://你的github用户名.github.io/year/month/day/aaa</code>，所以线上部署的图片如果想要正常显示，需要将其存放在该 url 地址的后面，因为最终被渲染后，是放在同一个文件夹下的，也就是 <code>https://你的github用户名.github.io/year/month/day/aaa/你的图片资源名</code> 但 Hexo 官方并没有对该情况做出合适的解决方案，只有一个原生方案是将你的静态资源放到 <code>public/image</code> 目录中进行统一管理，在部署阶段会将本地相对路径进行重定向，而这如果在博客文章日益累加的情况下，显然是不稳妥的方案，不仅不好管理，而且每次都需要将图片手动放入到该指定目录，并在文章中指定引用的方式，很不方便。我觉得应该借鉴类似 Typora 的文件资源管理：</p>
<p><img data-src="/2023/12/13/Hexo%E5%AE%A2%E5%88%B6%E5%8C%96%E5%8F%8ABug%E8%A7%A3%E5%86%B3/Typora%E5%9B%BE%E5%83%8F.png"></p>
<p>所以，Hexo 的社区便有人开发了解决此需求的第三方插件，<code>hexo-asset-image</code> 和 <code>hexo-asset-file</code></p>
<p>呼声比较高的是 <code>hexo-asset-image</code>，但经过我的检验，<code>hexo-asset-image </code> 并不能解决我的需求，因为该插件与 <code>hexo-next-theme</code> 下的图片懒加载插件 <a href="https://github.com/ApoorvSaxena/lozad.js">lozad.js</a> 冲突，这个插件会将 <code>img</code> 的 <code>src</code> 属性改为 <code>data-src</code>，而 hexo-asset-image 的工作原理是统一处理 <code>src</code> ，没有对 <code>data-src</code> 等属性的判断，所以便不会处理图片，我个人是希望能增加用户体验的，所以并不想放弃懒加载动画。想提个 PR 也已经发现原插件仓库已经被归档了。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>后面采用 <a href="https://github.com/hqweay/hexo-asset-image">hexo-asset-file</a> 插件进行替代</p>
<p>该仓库的 ChangeLog：</p>
<blockquote>
<p>2019-09-23: support hexo-lazyload-image<br>2019-09-23: fixed hexo-abbrlink using *.html image path error</p>
</blockquote>
<p>我们可以发现这个插件是满足我们的预期的，对 hexo 自带的懒加载插件做了冲突解决</p>
<h4 id="Usege"><a href="#Usege" class="headerlink" title="Usege"></a>Usege</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-file --save</span><br></pre></td></tr></table></figure>

<h4 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h4><p><strong>Make sure <code>post_asset_folder: true</code> in your <code>_config.yml</code>.</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. root directory:</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://tech.panqingshan.cn</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. child directory</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://tech.panqingshan.cn/blog</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog/</span></span><br></pre></td></tr></table></figure>

<h4 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;文章名&quot;</span></span><br></pre></td></tr></table></figure>

<p>通过此命令，我们可以得到一个新建md文章和对应的同级同名目录，当然你也可以选择手动创建，不过注意目录需要跟md文件名一一对应。</p>
<br>

<p>通过该插件，我们现在不仅可以在本地正常使用相对路径浏览，同时线上环境的图片地址也会有 <code>hexo-asset-file</code> 插件帮我们自动识别图片的本地相对路径并帮我们做转发，不管是在首页浏览还是进行文章详情页内，线上环境的图片都可正常显示。</p>
<br>

<h2 id="Hexo-Next-博客搭建教学"><a href="#Hexo-Next-博客搭建教学" class="headerlink" title="Hexo-Next 博客搭建教学"></a>Hexo-Next 博客搭建教学</h2><ul>
<li><a href="https://juejin.cn/post/7169115268944560135#heading-28">Hexo-Next主题搭建个人博客最新配置教程！</a></li>
<li><a href="https://juejin.cn/post/7226548855692574775">Github Pages 绑定域名</a></li>
</ul>
<br>

<h2 id="Hexo部署会自动删除README文件问题解决"><a href="#Hexo部署会自动删除README文件问题解决" class="headerlink" title="Hexo部署会自动删除README文件问题解决"></a>Hexo部署会自动删除README文件问题解决</h2><p>部署 Hexo 的时候发现根目录下 <code>README.md</code> 文件并没有被静态打包，Github 对应仓库缺少 README 文件介绍</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>我们在执行命令 <code>hexo g</code> 之后，Hexo 会打包 source 目录下的文件资源，把 source 目录里的 <code>.md</code> 格式的文件渲染为 html 文件并放到 public 下，而其他目录位置则不会被打包，继续执行命令 <code>hexo d</code> 之后，Hexo 会将 public 下面的所有文件提交到对应的 <code>你的GitHub用户名.github.io</code> 仓库；</p>
<p>由于打包后本地 public 文件夹里没有 README.md 这个文件，所以在提交 public 文件时，Github 会认为你把 README.md 文件删除了，同时 Github 也会删掉仓库里的 README.md 文件，这就是具体的原因</p>
<h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><p>我们可以将根目录下的 <code>README.md</code> 文件拷贝到 source目录下，并修改 Hexo 根目录下的 _config.yml 文件，将 skip_render 参数的值设置为 README.md</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">README.md</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span>  <span class="string">为什么需要设置这一步呢？</span></span><br><span class="line"><span class="string">//</span>  <span class="string">因为你执行hexo</span> <span class="string">g命令时，hexo</span> <span class="string">会默认将</span> <span class="string">source</span> <span class="string">文件里的所有md文件渲染为</span> <span class="string">html</span> <span class="string">文件放到</span> <span class="string">public</span> <span class="string">中，</span></span><br><span class="line"><span class="string">//</span>  <span class="string">同时</span> <span class="string">README.md</span> <span class="string">会被渲染为</span> <span class="string">README.html</span> <span class="string">文件放到</span> <span class="string">public</span> <span class="string">文件里</span></span><br><span class="line"><span class="string">//</span>  <span class="string">加上这段设置，就是告诉</span> <span class="string">hexo</span> <span class="string">的解析器，你在渲染</span> <span class="string">source</span> <span class="string">文件里的</span> <span class="string">md</span> <span class="string">文件时，跳过</span> <span class="string">README.md</span> <span class="string">文件</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="Git-Bash-手动添加到右键菜单"><a href="#Git-Bash-手动添加到右键菜单" class="headerlink" title="Git Bash 手动添加到右键菜单"></a>Git Bash 手动添加到右键菜单</h2><p>由于之前电脑重新系统，Git 重新下载过程中忘记添加注册 Git Bash 在当前目录背景打开的指令，故而重新进行手动添加，基于 <a href="https://github.com/BluePointLilac/ContextMenuManager/releases/tag/3.3.3.1">ContextMenuManager</a> 右键菜单管理工具进行，添加 bash.exe 的安装路径即可</p>
<br>


<h2 id="Failed-to-connect-to-github-com-port-443"><a href="#Failed-to-connect-to-github-com-port-443" class="headerlink" title="Failed to connect to github.com port 443"></a>Failed to connect to github.com port 443</h2><ul>
<li><a href="https://blog.csdn.net/zpf1813763637/article/details/128340109">Git报错： Failed to connect to github.com port 443 解决方案-CSDN博客</a></li>
</ul>
<p><strong>网络超时</strong>，使用 VPN 并配置代理（以下命令基于 <code>Clash for windows</code>，代理端口为 7890）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他命令</span></span><br><span class="line">git config --global --get http.proxy <span class="comment"># 查看代理命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消代理命令</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>

<h3 id="git-config-–global-–unset-http-proxy-的作用"><a href="#git-config-–global-–unset-http-proxy-的作用" class="headerlink" title="git config –global –unset http.proxy 的作用"></a>git config –global –unset http.proxy 的作用</h3><blockquote>
<p><strong>取消代理，状态变为直连</strong></p>
</blockquote>
<p><code>git config --global --unset http.proxy</code> 这个命令用于在全局 Git 配置中取消设置 HTTP 代理。具体作用是移除全局 Git 配置中的 HTTP 代理设置，从而使 Git 在执行网络操作时不再通过指定的 HTTP 代理进行连接。</p>
<p>通常情况下，当你在使用 Git 进行网络操作（如 clone、push、pull 等）时，如果之前设置了 HTTP 代理，Git 将会通过该代理进行网络连接。但有时候代理可能会导致连接问题，或者你想要取消代理设置以直接连接网络，那么就可以使用这个命令来移除之前配置的 HTTP 代理。</p>
<p>执行 <code>git config --global --unset http.proxy</code> 命令后，Git 将不再使用之前设置的 HTTP 代理，而是直接连接网络</p>
<br>


<h2 id="Git-报错：LF-will-be-replaced-by-CRLF-the-next-time-Git-touches-it"><a href="#Git-报错：LF-will-be-replaced-by-CRLF-the-next-time-Git-touches-it" class="headerlink" title="Git 报错：LF will be replaced by CRLF the next time Git touches it"></a>Git 报错：LF will be replaced by CRLF the next time Git touches it</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>产生报错原因及解释，见 <u><a href="https://juejin.cn/post/7011146890045554695?searchId=20231220092019BBCF50D3B9C389440792">参考文章</a></u></p>
</blockquote>
<br>


<h2 id="新增关于、标签、分类页"><a href="#新增关于、标签、分类页" class="headerlink" title="新增关于、标签、分类页"></a><a href="https://github.com/Mrcxt/blog/issues/2">新增关于、标签、分类页</a></h2><blockquote>
<p>关于、标签、分类页初始化 Hexo时是不存在相应页面的，需要手动创建</p>
</blockquote>
<ul>
<li>标签页和分类页的 title 最好不要修改，保持跟文件夹同名</li>
<li>如果标签页和分类页的内容（例如子标签）无法正常显示，务必在各自 md 文档的 meta 中加上 <code>layout: &quot;tags&quot;</code>  &amp;  <code>layout: &quot;categories&quot;</code>，确保使用了正确的布局文件</li>
<li>标题给出的参考链接版本较老，nav 可对应为 menu</li>
</ul>
<h3 id="子标签线上环境无法正常打开"><a href="#子标签线上环境无法正常打开" class="headerlink" title="子标签线上环境无法正常打开"></a>子标签线上环境无法正常打开</h3><p>分类页和标签页下的子标签线上环境无法正常打开其页面，是因为<strong>Hexo部署到Github后文件夹名大小写引起的问题</strong>，我们需要更改 <code>.deploy_git/.git/config</code> 中关于大小写不敏感的配置</p>
<p>打开 <code>.git</code> 目录下的config文件并修改 <code>ignorecase = true</code> 为 <code>ignorecase = false</code></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="string">[core]</span></span><br><span class="line">repositoryformatversion = <span class="number">0</span></span><br><span class="line">filemode = <span class="literal">true</span></span><br><span class="line">bare = <span class="literal">false</span></span><br><span class="line">logallrefupdates = <span class="literal">true</span></span><br><span class="line">ignorecase = <span class="literal">true</span>   ##修改<span class="literal">true</span>为<span class="literal">false</span></span><br><span class="line">precomposeunicode = <span class="literal">true</span></span><br><span class="line">…</span><br></pre></td></tr></table></figure>

<p>接下来删除 <code>.deploy_git</code> 文件夹内除了 <code>.git</code> 外的所有部署文件</p>
<p>再执行重新部署命令，这样线上环境无法正常显示子标签列表的问题就解决了~</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://trifond.github.io/2018/12/05/hexo-folder-ignore-case/">参考链接🔗</a></li>
</ul>
<br>

<h2 id="新增图片预览"><a href="#新增图片预览" class="headerlink" title="新增图片预览"></a>新增图片预览</h2><p>Hexo-next 主题内置 fancybox 预览插件，fancybox: false 为 true 就行，如果没内置 fancybox 插件，需手动下载</p>
<ul>
<li><a href="https://luhuadong.com/hexo/hexo-fancybox.html">下载参考链接</a></li>
</ul>
<br>

<h2 id="新增-Short-时刻"><a href="#新增-Short-时刻" class="headerlink" title="新增 Short 时刻"></a>新增 Short 时刻</h2><p>本来想实现类似 <a href="https://diygod.cc/">diygod.cc</a> 中类似 Short 记录心情时刻都功能，但在 Hexo 中实现貌似有点麻烦（需要开发新的 Layout）但目前空闲时间并不多，只能先列个 Todo 了，以后有时间再回来看看。</p>
<p><img data-src="/2023/12/13/Hexo%E5%AE%A2%E5%88%B6%E5%8C%96%E5%8F%8ABug%E8%A7%A3%E5%86%B3/Short.png"></p>
<p>Hexo 社区中有 <a href="https://github.com/hexojs/hexo-generator-index">hexo-generator-index</a> 和第三方的 <a href="https://github.com/Jamling/hexo-generator-index2/tree/master">hexo-generator-index2</a> ，本来的想法是拷贝一个首页并加上过滤器只包含 Short 相关的文章，但目前不知道如何 copy 首页🤣 目前的 Short 为 categories 和 tags 的子路由，只相当于在右侧菜单栏配备了路由，样式还是基于 categories 或 tags 的样式（仅包含文字），但这显然不是我想要的</p>
<p>我希望 Short 应包含：</p>
<ul>
<li><input disabled type="checkbox"> <strong>文章瀑布流布局（含图片</strong>，Short 不必按时间划分（样式），只需按照日期排序）</li>
<li><input disabled type="checkbox"> 九宫格（扩展）</li>
<li><input disabled type="checkbox"> 实况（扩展）</li>
<li><input disabled type="checkbox"> Short 左右导航只链接 Short（扩展，这部分应该可以基于过滤器来实现，过滤仅包含 Short）</li>
</ul>
<br>

<h2 id="切换暗色风格"><a href="#切换暗色风格" class="headerlink" title="切换暗色风格"></a>切换暗色风格</h2><p>安装 <code>hexo-next-darkmode</code> 插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-next-darkmode --save</span><br></pre></td></tr></table></figure>

<p>配置参数，在 Next 主题的 <code>_config.yml</code> 配置文件里添加以下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Darkmode JS</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/rqh656418510/hexo-next-darkmode, https://github.com/sandoche/Darkmode.js</span></span><br><span class="line"><span class="attr">darkmode_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">bottom:</span> <span class="string">&#x27;64px&#x27;</span> <span class="comment"># default: &#x27;32px&#x27;</span></span><br><span class="line">  <span class="attr">right:</span> <span class="string">&#x27;unset&#x27;</span> <span class="comment"># default: &#x27;32px&#x27;</span></span><br><span class="line">  <span class="attr">left:</span> <span class="string">&#x27;32px&#x27;</span> <span class="comment"># default: &#x27;unset&#x27;</span></span><br><span class="line">  <span class="attr">time:</span> <span class="string">&#x27;0.5s&#x27;</span> <span class="comment"># default: &#x27;0.3s&#x27;</span></span><br><span class="line">  <span class="attr">mixColor:</span> <span class="string">&#x27;transparent&#x27;</span> <span class="comment"># default: &#x27;#fff&#x27;</span></span><br><span class="line">  <span class="attr">backgroundColor:</span> <span class="string">&#x27;transparent&#x27;</span> <span class="comment"># default: &#x27;#fff&#x27;</span></span><br><span class="line">  <span class="attr">buttonColorDark:</span> <span class="string">&#x27;#100f2c&#x27;</span> <span class="comment"># default: &#x27;#100f2c&#x27;</span></span><br><span class="line">  <span class="attr">buttonColorLight:</span> <span class="string">&#x27;#fff&#x27;</span> <span class="comment"># default: &#x27;#fff&#x27;</span></span><br><span class="line">  <span class="attr">isActivated:</span> <span class="literal">false</span> <span class="comment"># default false</span></span><br><span class="line">  <span class="attr">saveInCookies:</span> <span class="literal">true</span> <span class="comment"># default: true</span></span><br><span class="line">  <span class="attr">label:</span> <span class="string">&#x27;🌓&#x27;</span> <span class="comment"># default: &#x27;&#x27;</span></span><br><span class="line">  <span class="attr">autoMatchOsTheme:</span> <span class="literal">true</span> <span class="comment"># default: true</span></span><br><span class="line">  <span class="attr">libUrl:</span> <span class="comment"># Set custom library cdn url for Darkmode.js</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>isActivated: true</code>：默认激活暗黑 / 夜间模式，请始终与 <code>saveInCookies: false</code>、<code>autoMatchOsTheme: false</code> 一起使用；同时需要在 NexT 主题的 <code>_config.yml</code> 配置文件里设置 <code>pjax: true</code>，即启用 Pjax。</p>
<p>为了确保 Next 原生的 <code>darkmode</code> 选项设置为 <code>false</code>，在 Next 的 <code>_config.yml</code> 配置文件中更改以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">darkmode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>重新构建生成静态资源文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.techgrow.cn/posts/abf4aee1.html#%E5%AE%89%E8%A3%85-Hexo-%E6%8F%92%E4%BB%B6">参考文章🔗</a></li>
</ul>
<br>

<h2 id="更改鼠标指针样式"><a href="#更改鼠标指针样式" class="headerlink" title="更改鼠标指针样式"></a>更改鼠标指针样式</h2><p>将 cursor.js 文件导入 <code>\themes\hexo-theme-next\layout\_layout.njk</code> （这里实现的是全局样式），将相关的 cursor.css 导入到 <code>source\_data\styles.styl</code> ，下面给出源码：</p>
<p><strong>cursor.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">CURSOR</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">lerp</span> = <span class="function">(<span class="params">a, b, n</span>) =&gt;</span> (<span class="number">1</span> - n) * a + n * b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStyle</span> = (<span class="params">el, attr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">getComputedStyle</span></span><br><span class="line">            ? <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(el)[attr]</span><br><span class="line">            : el.<span class="property">currentStyle</span>[attr];</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cursor</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pos</span> = &#123;<span class="attr">curr</span>: <span class="literal">null</span>, <span class="attr">prev</span>: <span class="literal">null</span>&#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pt</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">create</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">move</span>(<span class="params">left, top</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">style</span>[<span class="string">&quot;left&quot;</span>] = <span class="string">`<span class="subst">$&#123;left&#125;</span>px`</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">style</span>[<span class="string">&quot;top&quot;</span>] = <span class="string">`<span class="subst">$&#123;top&#125;</span>px`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">cursor</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cursor</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">id</span> = <span class="string">&quot;cursor&quot;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;hidden&quot;</span>);</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(<span class="variable language_">this</span>.<span class="property">cursor</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; el.<span class="property">length</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">getStyle</span>(el[i], <span class="string">&quot;cursor&quot;</span>) == <span class="string">&quot;pointer&quot;</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">pt</span>.<span class="title function_">push</span>(el[i].<span class="property">outerHTML</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>((<span class="variable language_">this</span>.<span class="property">scr</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>)));</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">scr</span>.<span class="property">innerHTML</span> = <span class="string">`* &#123;cursor: url(&quot;data:image/svg+xml,&lt;svg xmlns=&#x27;http://www.w3.org/2000/svg&#x27; viewBox=&#x27;0 0 8 8&#x27; width=&#x27;8px&#x27; height=&#x27;8px&#x27;&gt;&lt;circle cx=&#x27;4&#x27; cy=&#x27;4&#x27; r=&#x27;4&#x27; opacity=&#x27;.5&#x27;/&gt;&lt;/svg&gt;&quot;) 4 4, auto&#125;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">refresh</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">scr</span>.<span class="title function_">remove</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;hover&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pos</span> = &#123;<span class="attr">curr</span>: <span class="literal">null</span>, <span class="attr">prev</span>: <span class="literal">null</span>&#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pt</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">create</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">onmouseover</span>  = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">pt</span>.<span class="title function_">includes</span>(e.<span class="property">target</span>.<span class="property">outerHTML</span>) &amp;&amp; <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;hover&quot;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">onmouseout</span>   = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">pt</span>.<span class="title function_">includes</span>(e.<span class="property">target</span>.<span class="property">outerHTML</span>) &amp;&amp; <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;hover&quot;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">onmousemove</span>  = <span class="function"><span class="params">e</span> =&gt;</span> &#123;(<span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">curr</span> == <span class="literal">null</span>) &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">move</span>(e.<span class="property">clientX</span> - <span class="number">8</span>, e.<span class="property">clientY</span> - <span class="number">8</span>); <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">curr</span> = &#123;<span class="attr">x</span>: e.<span class="property">clientX</span> - <span class="number">8</span>, <span class="attr">y</span>: e.<span class="property">clientY</span> - <span class="number">8</span>&#125;; <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;hidden&quot;</span>);&#125;;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">onmouseenter</span> = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;hidden&quot;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">onmouseleave</span> = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;hidden&quot;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">onmousedown</span>  = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">onmouseup</span>    = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">cursor</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span>.<span class="property">x</span> = <span class="title class_">Math</span>.<span class="title function_">lerp</span>(<span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">curr</span>.<span class="property">x</span>, <span class="number">0.15</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span>.<span class="property">y</span> = <span class="title class_">Math</span>.<span class="title function_">lerp</span>(<span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span>.<span class="property">y</span>, <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">curr</span>.<span class="property">y</span>, <span class="number">0.15</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">move</span>(<span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span>.<span class="property">y</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">prev</span> = <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">curr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">render</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable constant_">CURSOR</span> = <span class="keyword">new</span> <span class="title class_">Cursor</span>();</span><br><span class="line">    <span class="comment">// 需要重新获取列表时，使用 CURSOR.refresh()</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p><strong>cursor.css</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 鼠标光标 cursor.css */</span></span><br><span class="line"><span class="selector-id">#cursor</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.25</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10086</span>;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.2s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">transition-property</span>: background, opacity, transform;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#cursor</span><span class="selector-class">.hidden</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#cursor</span><span class="selector-class">.hover</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.1</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#cursor</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://blog.xecades.xyz/articles/cursor/">参考链接🔗</a></li>
</ul>
<br>

<h2 id="腾讯云对象存储文件链接"><a href="#腾讯云对象存储文件链接" class="headerlink" title="腾讯云对象存储文件链接"></a>腾讯云对象存储文件链接</h2><p>如果直接在文件列表中 copy 文件链接的，是有效期为一小时的临时链接，我们需要进入文件详情 copy 永久链接才不会太闹心（安全隐患现在不是我们的优先考虑项，让图片长时间的正常预览显示才是）</p>
<p><img data-src="/2023/12/13/Hexo%E5%AE%A2%E5%88%B6%E5%8C%96%E5%8F%8ABug%E8%A7%A3%E5%86%B3/%E8%85%BE%E8%AE%AF%E4%BA%91-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8-%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8.png"></p>
<p><img data-src="/2023/12/13/Hexo%E5%AE%A2%E5%88%B6%E5%8C%96%E5%8F%8ABug%E8%A7%A3%E5%86%B3/%E8%85%BE%E8%AE%AF%E4%BA%91-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8-%E6%B0%B8%E4%B9%85%E9%93%BE%E6%8E%A5.png"></p>
<br>

<h2 id="Motion-Loading"><a href="#Motion-Loading" class="headerlink" title="Motion Loading"></a>Motion Loading</h2><p>关于全局的 Motion 动画，有一点想说的</p>
<ul>
<li><a href="https://github.com/iissnan/hexo-theme-next/issues/669">如何实现页面加载中的过渡动画 · Issue #669 · iissnan/hexo-theme-next · GitHub</a><img data-src="/2023/12/13/Hexo%E5%AE%A2%E5%88%B6%E5%8C%96%E5%8F%8ABug%E8%A7%A3%E5%86%B3/motion.png"></li>
</ul>
<p>Hexo-next 的 （pace属性）页面加载动画可选项不多，后面看腻了就给关了，并把 motion 动画设置为 async，在加载速度和美化之间做了一个平衡，Hexo 如果将 motion 设置为 false，加载效率会大大提升（纯静态，无后台数据交互）</p>
<br>

<h2 id="仅对指定布局运用光标和点击样式"><a href="#仅对指定布局运用光标和点击样式" class="headerlink" title="仅对指定布局运用光标和点击样式"></a>仅对指定布局运用光标和点击样式</h2><p>为了增强阅读专注体验，我移除了post页面上的 framework 和 mac 光标样式，操作如下：</p>
<p>创建新的布局文件，暂且命名为 _layout-for-post-ben.njk（注意这里文件必须以 <code>_</code> 为开头），否则会被 Hexo 编译导致无法正常使用，在新布局文件中删除以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 鼠标点击特效 --&gt;</span><br><span class="line">&#123;% if theme.fireworks %&#125;</span><br><span class="line">  &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; </span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; </span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;/js/fireworks.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 鼠标光标 iPad --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/cursor.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="不可行的操作"><a href="#不可行的操作" class="headerlink" title="不可行的操作"></a>不可行的操作</h3><p>最开始我并没有创建新布局文件的想法（以为这样会有代码冗余，可能有更好的解决方案），但实际上一开始连修改的布局文件都不知道在哪定位，最后在 <code>themes\hexo-theme-next\layout\_partials\page\</code> 目录下，找到了可修改的局部布局文件，但一个个文件修改，实际上会更加麻烦，同时无法全部应用，因为有些网页是没有注册layout的，通过源代码可知，这一部分直接通过 else 进行判断了，所以这一部分你是无法直接添加 framework特效的，除非你在 page.njk 里进行新 layout 的注册。但是只想光标和点击样式对post 页面失效，所以就制定了新的适用于 post 的布局文件</p>
<p>补充：同时将上述代码放到非 _layout 文件中，会造成效果延迟。可能的原因是</p>
<ol>
<li><strong>加载顺序不同</strong>: 如果这些代码片段分别位于不同文件中，加载页面时它们可能遵循不同的加载顺序。这可能导致 <code>anime.js</code> 或 <code>fireworks.js</code> 脚本延迟加载，因此烟花效果可能不会立即出现。</li>
<li><strong>加载时间差异</strong>: 不同文件的加载时间可能会不同，尤其是如果它们位于不同的位置或从不同的服务器加载。</li>
</ol>
<p>要解决这个问题，可以尝试以下方法：</p>
<ul>
<li><p><strong>合并文件</strong>: 将这些代码片段合并到同一个文件中，并确保它们按照正确的顺序排列。这样可以确保 <code>anime.js</code> 和 <code>fireworks.js</code> 会在页面加载时按照正确的顺序加载和执行。</p>
</li>
<li><p><strong>异步加载</strong>: 使用 <code>defer</code> 或 <code>async</code> 属性来异步加载脚本文件，这有助于避免阻塞页面加载。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;/js/fireworks.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>延迟执行</strong>: 将烟花效果的初始化或触发代码放置在页面加载完成后再执行的位置，以避免脚本尝试在相关元素还未完全加载时执行。</p>
</li>
<li><p><strong>调试和性能优化</strong>: 使用浏览器的开发者工具进行调试，查看网络面板和控制台，以确定脚本加载和执行的情况，并进行性能优化。</p>
</li>
</ul>
<p>选择适合你情况的解决方法，可以确保烟花效果能够按照预期立即出现，而不是有延迟。</p>
<br>

<h2 id="修改-motion-js-加快动画"><a href="#修改-motion-js-加快动画" class="headerlink" title="修改 motion.js 加快动画"></a>修改 motion.js 加快动画</h2><p>进入 motion.js，修改 duration 属性（默认是 duratio</p>
<p>n=200 | 500，detalT 是 200）修改成 duration=100 和 detalT=10</p>
<ul>
<li><a href="https://yxzi.xyz/posts/9570/">参考链接🔗</a></li>
</ul>
<br>

<h2 id="使用-Cloud-Flare’s-CDN-加速-Github-Pages-的访问速度"><a href="#使用-Cloud-Flare’s-CDN-加速-Github-Pages-的访问速度" class="headerlink" title="使用 Cloud Flare’s CDN 加速 Github Pages 的访问速度"></a>使用 Cloud Flare’s CDN 加速 Github Pages 的访问速度</h2><blockquote>
<p>相比于 又拍云，Cloud Flare 的优点是不要求域名备案，免费方案也足够使用</p>
</blockquote>
<p>操作步骤：</p>
<ol>
<li>注册 Cloud Flare 账号</li>
<li>添加站点</li>
<li>选择计划</li>
<li>添加编辑 DNS 记录</li>
<li>按照 Cloud Flare 平台提示，修改阿里云的 DNS 服务器为 Cloud Flare 平台所提供的 DNS 服务器（这里因为我买的是阿里云的域名）<img data-src="/2023/12/13/Hexo%E5%AE%A2%E5%88%B6%E5%8C%96%E5%8F%8ABug%E8%A7%A3%E5%86%B3/cloudflare-cdn.png" alt style="zoom: 75%;"></li>
<li>等待一定时间之后就会收到激活成功的邮件啦~（CDN服务器更新需要时间，激活成功后请稍等片段再到 Cloud Flare 控制台查看分析数据，检验是否成功）<img data-src="/2023/12/13/Hexo%E5%AE%A2%E5%88%B6%E5%8C%96%E5%8F%8ABug%E8%A7%A3%E5%86%B3/Successful-activation.png" alt style="zoom:40%;"></li>
</ol>
<ul>
<li><a href="https://www.jun997.xyz/2022/05/18/62ef741104da.html#%E4%B8%89-%E5%9C%A8cloudflare%E5%B9%B3%E5%8F%B0%E4%B8%8A%E5%BC%80%E5%90%AFcdn%E6%9C%8D%E5%8A%A1">参考链接🔗</a></li>
</ul>
<br>

<h2 id="hexo-lazyload-image"><a href="#hexo-lazyload-image" class="headerlink" title="hexo-lazyload-image"></a><a href="https://github.com/Troy-Yang/hexo-lazyload-image">hexo-lazyload-image</a></h2><p>一款 Hexo 图片懒加载插件，仅需更改站点配置文件即可（先关闭 Hexo-next 自带的 lazyload）</p>
<p>该插件满足我快速更改自定义 loading .gif 的需求，但是性能速度被拉低，在通过 Cloud Flare CDN 加速网站后，仅通过 Hexo 官方使用的 load 插件已经基本满足图片懒加载的等待需求了，不太需要加载动画来优化用户体验</p>
<p>同时该插件还存在 bug，文章的第一张图片和最后一张图片有时候会不更换占位图片，这个 bug 有待修改，使用该插件后我觉得我的网页图片加载体验是降低了的</p>
<ul>
<li><input disabled type="checkbox"> 只需要纯粹的图片占位符即可</li>
</ul>
<br>

<h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><ul>
<li>即使你删除了 blog 中的 .deploy_git，通过 <code>hexo d</code> 部署还是能自动生成回来的</li>
<li>博客线上环境完成部署大概有 2 分钟的滞后性，期间存在部分部署持续推进</li>
<li><a href="https://guiblogs.com/hexo30-15/">移除 Hexo 文章點擊「閱讀全文」後網址出現的 #more _</a></li>
<li>Typora中的制表符实行 <code>&lt;br /&gt;</code> 目前已知的只对 Github 生效，Hexo 无效</li>
<li>删除：Aplayer(插件)、fork me on github(样式)、darkmode(插件)、clicklove(样式)、pace(lazyload)、<u>motion(优化，补充：motion中的fadeIn设置了下移的样式，有时间看看如何优化)</u>、其他优化更新都记录在此文章中了 – 2023年12月25日</li>
<li>Hexo 的 markdown todo 样式渲染有误</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://nopoetry.github.io/2020/08/03/Hexo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/">Hexo博客插入图片的方法</a></li>
<li><a href="https://leay.net/2019/12/25/hexo/">Hexo 引用本地图片以及引用本地任意位置图片的一点思路</a></li>
<li><a href="https://blog.csdn.net/wxl1555/article/details/79291865">hexo系列问题之部署到github时会删掉README文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>前端性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>随便聊聊</title>
    <url>/2023/12/26/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%91%8A%E4%B8%80%E6%AE%B5%E8%90%BD/</url>
    <content><![CDATA[<hr>
<hr>
<span id="more"></span>

<p>这两天在倒腾一年前基于 Hexo 搭建的静态网站（<s>有点</s>算逃避现实吧），修改并优化了很多东西，初步满足自己对于个人博客的需求了。在这一年里，主要是学习前端的知识（学习时间：2022.07.26-2023.09.22，于 2023.06 找到了自己的第一份前端实习）见识到了很多有趣的博客和灵魂，自己也搭建了另一个博客送给了好朋友（<a href="https://camille.plus/">前往博客</a>（这是基于 astro2.0 博客框架搭建的）），期间也想过要不要更换新的博客框架，但 Hexo-next 主题我确实还是蛮喜欢的，之前第一次见 Hexo-next 博客是大二学期的时候，那时 Hexo-next 搭建的博客真的给我惊艳到了，当时连博客框架是什么都不知道哈哈哈<del>后面联系了站主了解到了 Hexo（也弃坑了，确实长期坚持写博客是一件很不容易但很有意义的事），直到后来下一学期才了解到 Hexo 其实分为了很多主题，之前喜欢的主题叫 next，我搭建博客的初心也是从这里开始的，不过在此之前我曾用 Docsify 搭建过个人文档（之前不了解 Docsify 是生成文档类的静态网址哈哈哈哈</del>）</p>
<p>轻量化的博客框架现在市面上有很多，有基于区块链技术搭建的、基于 Obsidian 文档流搭建的个人仓库类博客，也有专注于内容的极简风格博客主题（hexo-theme-cards）等等，或许等以后有了新的需求，会体验或迁移到新的博客框架。接下来的一年主要还是以 当前的 Hexo-next 主题为主，博客搭建到这就告一段落了~（具体日志见：<a href="Hexo%E5%AE%A2%E5%88%B6%E5%8C%96%E5%8F%8ABug%E8%A7%A3%E5%86%B3.md">Hexo客制化及Bug解决</a>）</p>
<p>接下来对于博客文章初步的决定是记录《数据结构与算法》相关的知识点 &amp; …….</p>
<p>收收心，准备学习了~</p>
]]></content>
      <categories>
        <category>Short</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Short</tag>
      </tags>
  </entry>
</search>
